<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApiConnectorBacklogNotFound" xml:space="preserve">
    <value>Backlog not found.</value>
  </data>
  <data name="ApiConnectorErrorOnItem" xml:space="preserve">
    <value>Error on item:</value>
  </data>
  <data name="ApiConnectorErrorOnItemContinue" xml:space="preserve">
    <value>Would you like to continue with the next item?</value>
  </data>
  <data name="ApiConnectorErrorOnItemCreatedWOName" xml:space="preserve">
    <value>Created without Name!</value>
  </data>
  <data name="ApiConnectorErrorOnItemNotCreated" xml:space="preserve">
    <value>Not created!</value>
  </data>
  <data name="ApiConnectorErrorOnItemTryAgain" xml:space="preserve">
    <value>Would you like to try again (without an employee set)?</value>
  </data>
  <data name="ApiConnectorNameNotFound" xml:space="preserve">
    <value>Could not detect the name of the Backlog.
Is the correct name:</value>
  </data>
  <data name="ApiInstructionsColumn1" xml:space="preserve">
    <value>IMPORTANT! Do this procedure only if the Backlog 
could not be found programmatically. 
1.  Open the Backlog 
2.  Press F12 and navigate to Networkanalysis (Chrome: Network) </value>
  </data>
  <data name="ApiInstructionsColumn2" xml:space="preserve">
    <value>3.  Create a new Epic (can be deleted later)
4.  Click on the first Request and then 'Request' (Chrome: 'Preview')
5.  Scroll down to 'updatePackage'. 
     Fill in the numbers at the end (here teamId =518, projectId =309)</value>
  </data>
  <data name="BacklogCompareviewModelErrorGetBacklog" xml:space="preserve">
    <value>Error while Reading the Backlog</value>
  </data>
  <data name="BacklogCompareviewModelSuccessGetBacklog" xml:space="preserve">
    <value>Backlog successfully read. Comparing Data...</value>
  </data>
  <data name="BacklogCompareviewModelTryGetBacklog" xml:space="preserve">
    <value>Trying to get existing Backlog</value>
  </data>
  <data name="BacklogViewHeader" xml:space="preserve">
    <value>Azure Backlog</value>
  </data>
  <data name="BacklogViewReadBacklog" xml:space="preserve">
    <value>Read Backlogs</value>
  </data>
  <data name="ButtonBack" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="ButtonContinue" xml:space="preserve">
    <value>Continue</value>
  </data>
  <data name="ButtonExit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="ButtonStart" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="DefaultTaskViewButtonOpen" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="DefaultTaskViewButtonRefresh" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="DefaultTaskViewButtonTexts" xml:space="preserve">
    <value>the Default Task List</value>
  </data>
  <data name="DefaultTaskViewHeader" xml:space="preserve">
    <value>Defaulttasks</value>
  </data>
  <data name="DefaultTaskViewInstruction" xml:space="preserve">
    <value>Add Default Tasks to the User-Stories</value>
  </data>
  <data name="ExcelInstructionColumn1" xml:space="preserve">
    <value>1.  Open and select Project
2.  Tab Reports
3.  Click P_ProjectReport
4.  Instead of 'fester Zeitraum' --&gt; select 'Projektzeitraum'</value>
  </data>
  <data name="ExcelInstructionColumn2" xml:space="preserve">
    <value>5.  Okay --&gt; Column Selection Window opens
6.  'Select Bearbeiter' and 'Proj.-Nr./PSP'
7.  Okay --&gt; Report will be created</value>
  </data>
  <data name="ExcelViewButtonReadFile" xml:space="preserve">
    <value>Read File</value>
  </data>
  <data name="ExcelViewHeader" xml:space="preserve">
    <value>Excel Input</value>
  </data>
  <data name="ExcelViewInstruction" xml:space="preserve">
    <value>How to export the Report from Axc</value>
  </data>
  <data name="ExcelViewItemDescription" xml:space="preserve">
    <value>Column for Itemdescriptions:</value>
  </data>
  <data name="ExcelViewItemDescriptionBlankText" xml:space="preserve">
    <value>e.g. B</value>
  </data>
  <data name="ExcelViewItemDescriptionToolTip" xml:space="preserve">
    <value>Set which column contains the Description of the Items.</value>
  </data>
  <data name="ExcelViewItemEmployee" xml:space="preserve">
    <value>Column for Employees assigned (optional):</value>
  </data>
  <data name="ExcelViewItemEmployeeBlankText" xml:space="preserve">
    <value>e.g. C</value>
  </data>
  <data name="ExcelViewItemEmployeeDefault" xml:space="preserve">
    <value>Default Employee (if more than 1):</value>
  </data>
  <data name="ExcelViewItemEmployeeDefaultToolTip" xml:space="preserve">
    <value>Set which employee will be assigned to the items, if there is more than one Employee set.
If the set number is greater than the number of employees, the last Employee one will be assigned
Tasks will be copied for each employee assigned.</value>
  </data>
  <data name="ExcelViewItemEmployeeToolTip" xml:space="preserve">
    <value>Set which column contains the employee, who will be assigned on the items. 
Format: 'Lastname, Firstname' Separate multiple employees with a semicolon ';'</value>
  </data>
  <data name="ExcelViewItemNumber" xml:space="preserve">
    <value>Column for Itemnumbers:</value>
  </data>
  <data name="ExcelViewItemNumberBlankText" xml:space="preserve">
    <value>e.g. D</value>
  </data>
  <data name="ExcelViewItemNumberToolTip" xml:space="preserve">
    <value>Set which column contains the Projectnumber of the Items.</value>
  </data>
  <data name="ExcelViewModelChildren" xml:space="preserve">
    <value>Setting Children for Data...</value>
  </data>
  <data name="ExcelViewModelReading" xml:space="preserve">
    <value>Reading: </value>
  </data>
  <data name="ExcelViewPath" xml:space="preserve">
    <value>Path to the Excel-File (.xlsx):</value>
  </data>
  <data name="ExcelViewPathToolTip" xml:space="preserve">
    <value>Click on the three dots, then select your Excel File</value>
  </data>
  <data name="ExcelViewWorksheetName" xml:space="preserve">
    <value>Name of the Worksheet:</value>
  </data>
  <data name="ExcelViewWorksheetNameToolTip" xml:space="preserve">
    <value>Select which worksheet contains the informations.</value>
  </data>
  <data name="ItemSelectViewHeader" xml:space="preserve">
    <value>Itemselection</value>
  </data>
  <data name="ItemSelectViewInstruction" xml:space="preserve">
    <value>Please select which items should be processed</value>
  </data>
  <data name="LoginViewButtonCompare" xml:space="preserve">
    <value>Compare with 
existing Backlog</value>
  </data>
  <data name="LoginViewButtonCreate" xml:space="preserve">
    <value>Create the items</value>
  </data>
  <data name="LoginViewHeader" xml:space="preserve">
    <value>Credential Input</value>
  </data>
  <data name="LoginViewLink" xml:space="preserve">
    <value>Link to the Backlog:</value>
  </data>
  <data name="LoginViewLinkBlankText" xml:space="preserve">
    <value>http://tfs.proleit-ag.local:8080/tfs/*****/*****/_backlogs/backlog/*****/Epics</value>
  </data>
  <data name="LoginViewModelMessageIds" xml:space="preserve">
    <value>Please provide Id's for both fields</value>
  </data>
  <data name="LoginViewModelMessagePassword" xml:space="preserve">
    <value>Please enter a valid Password!</value>
  </data>
  <data name="LoginViewModelMessageProxy" xml:space="preserve">
    <value>Please enter a valid Proxy Adress or uncheck the Box!</value>
  </data>
  <data name="LoginViewModelMessageUrl" xml:space="preserve">
    <value>Please enter a valid URL!</value>
  </data>
  <data name="LoginViewModelMessageUsername" xml:space="preserve">
    <value>Please enter a valid Usename!</value>
  </data>
  <data name="LoginViewPassword" xml:space="preserve">
    <value>Password:</value>
  </data>
  <data name="LoginViewProjectId" xml:space="preserve">
    <value>Project Id (optional):</value>
  </data>
  <data name="LoginViewProxyAddress" xml:space="preserve">
    <value>Proxy Adress:</value>
  </data>
  <data name="LoginViewProxyBlankText" xml:space="preserve">
    <value>Go To 'Network &amp; Internet' -&gt; 'Proxy' to see the Address</value>
  </data>
  <data name="LoginViewProxyToolTip" xml:space="preserve">
    <value>Use this option only if you need a proxy to enter the Backlog.</value>
  </data>
  <data name="LoginViewProxyUse" xml:space="preserve">
    <value>Use Proxy</value>
  </data>
  <data name="LoginViewTeamId" xml:space="preserve">
    <value>Team Id (optional):</value>
  </data>
  <data name="LoginViewUsername" xml:space="preserve">
    <value>Username:</value>
  </data>
  <data name="LoginViewUsernameBlankText" xml:space="preserve">
    <value>firstname.lastname@proleit.com</value>
  </data>
  <data name="MessageAlert" xml:space="preserve">
    <value>Alert</value>
  </data>
  <data name="MessageError" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="MessageEstablishConnection" xml:space="preserve">
    <value>Establishing Connection to Backlog</value>
  </data>
  <data name="MessageFinished" xml:space="preserve">
    <value>Finished!</value>
  </data>
  <data name="MessageLoginError" xml:space="preserve">
    <value>Error. Check your URL, Credentials and Internet Connection</value>
  </data>
  <data name="MessageLoginSuccess" xml:space="preserve">
    <value>Connection Successfully established</value>
  </data>
  <data name="MessageSetLanguage" xml:space="preserve">
    <value>Set the Application Language to German?
(Default Language: English)</value>
  </data>
  <data name="MessageSetLanguageHeader" xml:space="preserve">
    <value>Language Selection</value>
  </data>
  <data name="MessageWarning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="ProgressViewHeader" xml:space="preserve">
    <value>Azure Items</value>
  </data>
  <data name="ProgressViewModelErrorCreating" xml:space="preserve">
    <value>An Error occured. Please check your Internet Connection.</value>
  </data>
  <data name="ProgressViewModelPartiallyCreating" xml:space="preserve">
    <value>created. Problems occured with:</value>
  </data>
  <data name="ProgressViewModelStartCreating" xml:space="preserve">
    <value>Start with creating</value>
  </data>
  <data name="ProgressViewModelSuccessCreating" xml:space="preserve">
    <value>created successfully.</value>
  </data>
</root>